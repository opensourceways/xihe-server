definitions:
  app.ActivityDTO:
    properties:
      resource:
        $ref: '#/definitions/app.ResourceDTO'
      time:
        type: string
      type:
        type: string
    type: object
  app.CompetitionSubmissionDTO:
    properties:
      project:
        type: string
      score:
        type: number
      status:
        type: string
      submit_at:
        type: string
    type: object
  app.CompetitionSubmissionsDTO:
    properties:
      details:
        items:
          $ref: '#/definitions/app.CompetitionSubmissionDTO'
        type: array
      project:
        type: string
    type: object
  app.CompetitionSummaryDTO:
    properties:
      bonus:
        type: integer
      count:
        type: integer
      desc:
        type: string
      duration:
        type: string
      host:
        type: string
      id:
        type: string
      name:
        type: string
      poster:
        type: string
      status:
        type: string
    type: object
  app.CompetitionTeamDTO:
    properties:
      members:
        items:
          $ref: '#/definitions/app.CompetitionTeamMemberDTO'
        type: array
      name:
        type: string
    type: object
  app.CompetitionTeamMemberDTO:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  app.ComputeDTO:
    properties:
      flavor:
        type: string
      type:
        type: string
      version:
        type: string
    type: object
  app.DatasetDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.DatasetSummaryDTO:
    properties:
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.DomainTagsDTO:
    properties:
      domain:
        type: string
      items:
        items:
          $ref: '#/definitions/domain.Tags'
        type: array
      name:
        type: string
    type: object
  app.EvaluateDTO:
    properties:
      access_url:
        type: string
      error:
        type: string
      evaluate_id:
        type: string
    type: object
  app.FollowDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      is_follower:
        type: boolean
    type: object
  app.FollowsDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/app.FollowDTO'
        type: array
      total:
        type: integer
    type: object
  app.GlobalDatasetDTO:
    properties:
      avatar_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.GlobalDatasetsDTO:
    properties:
      projects:
        items:
          $ref: '#/definitions/app.GlobalDatasetDTO'
        type: array
      total:
        type: integer
    type: object
  app.GlobalModelDTO:
    properties:
      avatar_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.GlobalModelsDTO:
    properties:
      projects:
        items:
          $ref: '#/definitions/app.GlobalModelDTO'
        type: array
      total:
        type: integer
    type: object
  app.GlobalProjectDTO:
    properties:
      avatar_id:
        type: string
      cover_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      level:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.GlobalProjectsDTO:
    properties:
      projects:
        items:
          $ref: '#/definitions/app.GlobalProjectDTO'
        type: array
      total:
        type: integer
    type: object
  app.InferenceDTO:
    properties:
      access_url:
        type: string
      error:
        type: string
      inference_id:
        type: string
    type: object
  app.LikeDTO:
    properties:
      resource:
        $ref: '#/definitions/app.ResourceDTO'
      time:
        type: string
    type: object
  app.LoginDTO:
    properties:
      info:
        type: string
    type: object
  app.LuoJiaRecordDTO:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  app.ModelDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.ModelSummaryDTO:
    properties:
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.ProjectSummaryDTO:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      level:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  app.RankingDTO:
    properties:
      score:
        type: number
      submit_at:
        type: string
      team_name:
        type: string
    type: object
  app.RepoFileDownloadDTO:
    properties:
      content:
        type: string
      download_url:
        type: string
    type: object
  app.RepoPathItem:
    properties:
      is_dir:
        type: boolean
      is_lfs_file:
        type: boolean
      name:
        type: string
      path:
        type: string
    type: object
  app.ResourceDTO:
    properties:
      cover_id:
        type: string
      description:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        properties:
          avatar_id:
            type: string
          name:
            type: string
        type: object
      type:
        type: string
      update_at:
        type: string
    type: object
  app.ResourceSearchDTO:
    properties:
      top:
        items:
          $ref: '#/definitions/app.ResourceSummaryDTO'
        type: array
      total:
        type: integer
    type: object
  app.ResourceSummaryDTO:
    properties:
      name:
        type: string
      owner:
        type: string
    type: object
  app.SearchDTO:
    properties:
      dataset:
        $ref: '#/definitions/app.ResourceSearchDTO'
      model:
        $ref: '#/definitions/app.ResourceSearchDTO'
      project:
        $ref: '#/definitions/app.ResourceSearchDTO'
      user:
        $ref: '#/definitions/app.UserSearchDTO'
    type: object
  app.TrainingSummaryDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      duration:
        type: integer
      id:
        type: string
      is_done:
        type: boolean
      name:
        type: string
      status:
        type: string
    type: object
  app.UserCompetitionDTO:
    properties:
      bonus:
        type: integer
      count:
        type: integer
      dataset_doc:
        type: string
      dataset_url:
        type: string
      desc:
        type: string
      doc:
        type: string
      duration:
        type: string
      host:
        type: string
      id:
        type: string
      is_competitor:
        type: boolean
      name:
        type: string
      phase:
        type: string
      poster:
        type: string
      status:
        type: string
    type: object
  app.UserDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
    type: object
  app.UserSearchDTO:
    properties:
      top:
        items:
          type: string
        type: array
      total:
        type: integer
    type: object
  controller.CodeGeexRequest:
    properties:
      content:
        type: string
      lang:
        type: string
      result_num:
        type: integer
    type: object
  controller.Compute:
    properties:
      flavor:
        type: string
      type:
        type: string
      version:
        type: string
    type: object
  controller.EvaluateCreateRequest:
    properties:
      batch_size_scope:
        items:
          type: string
        type: array
      learning_rate_scope:
        items:
          type: string
        type: array
      momentum_scope:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  controller.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  controller.RepoFileCreateRequest:
    properties:
      base64_encoded:
        type: boolean
      content:
        type: string
    type: object
  controller.RepoFileUpdateRequest:
    properties:
      base64_encoded:
        type: boolean
      content:
        type: string
    type: object
  controller.TrainingCreateRequest:
    properties:
      boot_file:
        type: string
      code_dir:
        type: string
      compute:
        $ref: '#/definitions/controller.Compute'
      datasets:
        items:
          $ref: '#/definitions/controller.TrainingRef'
        type: array
      desc:
        type: string
      enable_aim:
        type: boolean
      enable_output:
        type: boolean
      env:
        items:
          $ref: '#/definitions/controller.KeyValue'
        type: array
      hyperparameter:
        items:
          $ref: '#/definitions/controller.KeyValue'
        type: array
      models:
        items:
          $ref: '#/definitions/controller.TrainingRef'
        type: array
      name:
        type: string
    type: object
  controller.TrainingRef:
    properties:
      File:
        type: string
      key:
        type: string
      name:
        type: string
      owner:
        type: string
    type: object
  controller.canApplyResourceNameResp:
    properties:
      can_apply:
        type: boolean
    type: object
  controller.codegeexResp:
    properties:
      answer:
        type: string
    type: object
  controller.datasetCreateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
    type: object
  controller.datasetDetail:
    properties:
      avatar_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      related_models:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      related_projects:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  controller.datasetUpdateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  controller.datasetsInfo:
    properties:
      avatar_id:
        type: string
      models:
        items:
          $ref: '#/definitions/app.DatasetSummaryDTO'
        type: array
      owner:
        type: string
      total:
        type: integer
    type: object
  controller.describePictureResp:
    properties:
      desc:
        type: string
    type: object
  controller.followingCreateRequest:
    properties:
      account:
        type: string
    type: object
  controller.likeCreateRequest:
    properties:
      name:
        type: string
      owner:
        type: string
      resource_type:
        type: string
    type: object
  controller.likeDeleteRequest:
    properties:
      name:
        type: string
      owner:
        type: string
      resource_type:
        type: string
    type: object
  controller.luojiaResp:
    properties:
      answer:
        type: string
    type: object
  controller.modelCreateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
    type: object
  controller.modelDetail:
    properties:
      avatar_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      related_datasets:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      related_projects:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  controller.modelUpdateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  controller.modelsInfo:
    properties:
      avatar_id:
        type: string
      models:
        items:
          $ref: '#/definitions/app.ModelSummaryDTO'
        type: array
      owner:
        type: string
      total:
        type: integer
    type: object
  controller.multiplePicturesGenerateResp:
    properties:
      pictures:
        items:
          type: string
        type: array
    type: object
  controller.panguRequest:
    properties:
      question:
        type: string
    type: object
  controller.panguResp:
    properties:
      answer:
        type: string
    type: object
  controller.pictureGenerateRequest:
    properties:
      desc:
        type: string
    type: object
  controller.pictureGenerateResp:
    properties:
      picture:
        type: string
    type: object
  controller.pictureUploadResp:
    properties:
      path:
        type: string
    type: object
  controller.platformInfo:
    properties:
      token:
        type: string
    type: object
  controller.projectCreateRequest:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
      training:
        type: string
      type:
        type: string
    type: object
  controller.projectDetail:
    properties:
      avatar_id:
        type: string
      cover_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      related_datasets:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      related_models:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      training:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  controller.projectForkRequest:
    properties:
      desc:
        type: string
      name:
        type: string
    type: object
  controller.projectUpdateRequest:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  controller.projectsInfo:
    properties:
      avatar_id:
        type: string
      owner:
        type: string
      projects:
        items:
          $ref: '#/definitions/app.ProjectSummaryDTO'
        type: array
      total:
        type: integer
    type: object
  controller.questionAskRequest:
    properties:
      picture:
        type: string
      question:
        type: string
    type: object
  controller.questionAskResp:
    properties:
      answer:
        type: string
    type: object
  controller.relatedResourceAddRequest:
    properties:
      name:
        type: string
      owner:
        type: string
    type: object
  controller.relatedResourceRemoveRequest:
    properties:
      id:
        type: string
      owner:
        type: string
    type: object
  controller.resourceTagsUpdateRequest:
    properties:
      add:
        items:
          type: string
        type: array
      remove:
        items:
          type: string
        type: array
    type: object
  controller.trainingCreateResp:
    properties:
      id:
        type: string
    type: object
  controller.trainingDetail:
    properties:
      aim_path:
        type: string
      compute:
        $ref: '#/definitions/app.ComputeDTO'
      created_at:
        type: string
      desc:
        type: string
      duration:
        type: integer
      enable_aim:
        type: boolean
      id:
        type: string
      is_done:
        type: boolean
      log:
        type: string
      name:
        type: string
      project_id:
        type: string
      status:
        type: string
    type: object
  controller.trainingLogResp:
    properties:
      log_url:
        type: string
    type: object
  controller.userBasicInfoUpdateRequest:
    properties:
      avatar_id:
        type: string
      bio:
        type: string
    type: object
  controller.userCreateRequest:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
    type: object
  controller.userDetail:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
      is_follower:
        type: boolean
    type: object
  domain.Tags:
    properties:
      items:
        items:
          type: string
        type: array
      kind:
        type: string
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - application/json
      description: callback of authentication by authing
      parameters:
      - description: authing code
        in: query
        name: code
        required: true
        type: string
      - description: redirect uri
        in: query
        name: redirect_uri
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
        "501":
          description: Not Implemented
          schema:
            type: duplicate_creating
      tags:
      - Login
  /{account}:
    get:
      consumes:
      - application/json
      description: get info of login
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LoginDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Login
  /{account}/gitlab:
    get:
      consumes:
      - application/json
      description: get code platform info of user
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.platformInfo'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      tags:
      - User
  /v1/bigmodel/ask:
    post:
      consumes:
      - application/json
      description: ask question based on a picture
      parameters:
      - description: body of ask question
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.questionAskRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.questionAskResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/codegeex:
    post:
      consumes:
      - application/json
      description: codegeex big model
      parameters:
      - description: codegeex body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.CodeGeexRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.codegeexResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/describe_picture:
    post:
      consumes:
      - application/json
      description: describe a picture
      parameters:
      - description: picture
        in: formData
        name: picture
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.describePictureResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/luojia:
    get:
      consumes:
      - application/json
      description: list luo-jia big model records
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LuoJiaRecordDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
    post:
      consumes:
      - application/json
      description: luo-jia big model
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.luojiaResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/luojia_upload_picture:
    post:
      consumes:
      - application/json
      description: upload a picture for luo-jia
      parameters:
      - description: picture
        in: formData
        name: picture
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.pictureUploadResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/multiple_pictures:
    post:
      consumes:
      - application/json
      description: generate multiple pictures based on a text
      parameters:
      - description: body of generating picture
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.pictureGenerateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.multiplePicturesGenerateResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/pangu:
    post:
      consumes:
      - application/json
      description: pan-gu big model
      parameters:
      - description: body of pan-gu
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.panguRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.panguResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/single_picture:
    post:
      consumes:
      - application/json
      description: generate a picture based on a text
      parameters:
      - description: body of generating picture
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.pictureGenerateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.pictureGenerateResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/vqa_upload_picture:
    post:
      consumes:
      - application/json
      description: upload a picture for vqa
      parameters:
      - description: picture
        in: formData
        name: picture
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.pictureUploadResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/competition:
    get:
      consumes:
      - application/json
      description: list competitions
      parameters:
      - description: competition status, such as done, preparing, in-progress
        in: query
        name: status
        type: string
      - description: just list competitions of competitor, if it is set
        in: query
        name: mine
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CompetitionSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Competition
  /v1/competition/{id}:
    get:
      consumes:
      - application/json
      description: get detail of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserCompetitionDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - Competition
  /v1/competition/{id}/ranking/{phase}:
    get:
      consumes:
      - application/json
      description: get ranking list of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: competition phase, such as preliminary, final
        in: path
        name: phase
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.RankingDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetRankingList
      tags:
      - Competition
  /v1/competition/{id}/submissions:
    get:
      consumes:
      - application/json
      description: get submissions
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CompetitionSubmissionsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetSubmissions
      tags:
      - Competition
  /v1/competition/{id}/team:
    get:
      consumes:
      - application/json
      description: get team of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CompetitionTeamDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetTeam
      tags:
      - Competition
  /v1/dataset:
    get:
      consumes:
      - application/json
      description: list global public dataset
      parameters:
      - description: name of dataset
        in: query
        name: name
        type: string
      - description: tags, separate multiple tags with commas
        in: query
        name: tags
        type: string
      - description: tag kinds, separate multiple kinds with commas
        in: query
        name: tag_kinds
        type: string
      - description: dataset level, such as official, good
        in: query
        name: level
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalDatasetsDTO'
      summary: ListGlobal
      tags:
      - Dataset
    post:
      consumes:
      - application/json
      description: create dataset
      parameters:
      - description: body of creating dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.datasetCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.DatasetDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - Dataset
  /v1/dataset/{owner}:
    get:
      consumes:
      - application/json
      description: list dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: query
        name: name
        type: string
      - description: repo type of dataset, value can be public or private
        in: query
        name: repo_type
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.datasetsInfo'
      summary: List
      tags:
      - Dataset
  /v1/dataset/{owner}/{id}:
    put:
      consumes:
      - application/json
      description: update property of dataset
      parameters:
      - description: id of dataset
        in: path
        name: id
        required: true
        type: string
      - description: body of updating dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.datasetUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Dataset
  /v1/dataset/{owner}/{id}/tags:
    put:
      consumes:
      - application/json
      description: set tags for dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: id of dataset
        in: path
        name: id
        required: true
        type: string
      - description: body of tags
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.resourceTagsUpdateRequest'
      responses:
        "202":
          description: ""
      summary: SetTags
      tags:
      - Dataset
  /v1/dataset/{owner}/{name}:
    get:
      consumes:
      - application/json
      description: get dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.datasetDetail'
      summary: Get
      tags:
      - Dataset
  /v1/dataset/{owner}/{name}/check:
    get:
      consumes:
      - application/json
      description: check whether the name can be applied to create a new dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.canApplyResourceNameResp'
      summary: Check
      tags:
      - Dataset
  /v1/evaluate/project/{pid}/training/{tid}/evaluate:
    post:
      consumes:
      - application/json
      description: create evaluate
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: tid
        required: true
        type: string
      - description: body of creating inference
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.EvaluateCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.EvaluateDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - Evaluate
  /v1/evaluate/project/{pid}/training/{tid}/evaluate/{id}:
    get:
      consumes:
      - application/json
      description: watch evaluate
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: tid
        required: true
        type: string
      - description: evaluate id
        in: path
        name: id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.EvaluateDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Watch
      tags:
      - Evaluate
  /v1/inference/project/{owner}/{pid}:
    get:
      consumes:
      - application/json
      description: create inference
      parameters:
      - description: project owner
        in: path
        name: owner
        required: true
        type: string
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.InferenceDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - Inference
  /v1/model:
    get:
      consumes:
      - application/json
      description: list global public model
      parameters:
      - description: name of model
        in: query
        name: name
        type: string
      - description: tags, separate multiple tags with commas
        in: query
        name: tags
        type: string
      - description: tag kinds, separate multiple kinds with commas
        in: query
        name: tag_kinds
        type: string
      - description: model level, such as official, good
        in: query
        name: level
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalModelsDTO'
      summary: ListGlobal
      tags:
      - Model
    post:
      consumes:
      - application/json
      description: create model
      parameters:
      - description: body of creating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.modelCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.ModelDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - Model
  /v1/model/{owner}:
    get:
      consumes:
      - application/json
      description: list model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: query
        name: name
        type: string
      - description: repo type of model, value can be public or private
        in: query
        name: repo_type
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.modelsInfo'
      summary: List
      tags:
      - Model
  /v1/model/{owner}/{id}:
    put:
      consumes:
      - application/json
      description: update property of model
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of updating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.modelUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Model
  /v1/model/{owner}/{id}/dataset/relation:
    delete:
      consumes:
      - application/json
      description: remove related dataset to model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceRemoveRequest'
      responses:
        "204":
          description: ""
      summary: RemoveRelatedDataset
      tags:
      - Model
    put:
      consumes:
      - application/json
      description: add related dataset to model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceAddRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.ResourceDTO'
      summary: AddRelatedDataset
      tags:
      - Model
  /v1/model/{owner}/{id}/tags:
    put:
      consumes:
      - application/json
      description: set tags for model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of tags
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.resourceTagsUpdateRequest'
      responses:
        "202":
          description: ""
      summary: SetTags
      tags:
      - Model
  /v1/model/{owner}/{name}:
    get:
      consumes:
      - application/json
      description: get model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.modelDetail'
      summary: Get
      tags:
      - Model
  /v1/model/{owner}/{name}/check:
    get:
      consumes:
      - application/json
      description: check whether the name can be applied to create a new model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.canApplyResourceNameResp'
      summary: Check
      tags:
      - Model
  /v1/project:
    get:
      consumes:
      - application/json
      description: list global public project
      parameters:
      - description: name of project
        in: query
        name: name
        type: string
      - description: tags, separate multiple tags with commas
        in: query
        name: tags
        type: string
      - description: tag kinds, separate multiple kinds with commas
        in: query
        name: tag_kinds
        type: string
      - description: project level, such as official, good
        in: query
        name: level
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalProjectsDTO'
      summary: ListGlobal
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: create project
      parameters:
      - description: body of creating project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectCreateRequest'
      produces:
      - application/json
      responses: {}
      summary: Create
      tags:
      - Project
  /v1/project/{owner}:
    get:
      consumes:
      - application/json
      description: list project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: query
        name: name
        type: string
      - description: repo type of project, value can be public or private
        in: query
        name: repo_type
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.projectsInfo'
      summary: List
      tags:
      - Project
  /v1/project/{owner}/{id}:
    post:
      consumes:
      - application/json
      description: fork project
      parameters:
      - description: owner of forked project
        in: path
        name: owner
        required: true
        type: string
      - description: id of forked project
        in: path
        name: id
        required: true
        type: string
      - description: body of forking project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectForkRequest'
      produces:
      - application/json
      responses: {}
      summary: Fork
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: update project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of updating project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Project
  /v1/project/{owner}/{id}/dataset/relation:
    delete:
      consumes:
      - application/json
      description: remove related dataset to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceRemoveRequest'
      responses:
        "204":
          description: ""
      summary: RemoveRelatedDataset
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: add related dataset to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceAddRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.ResourceDTO'
      summary: AddRelatedDataset
      tags:
      - Project
  /v1/project/{owner}/{id}/model/relation:
    delete:
      consumes:
      - application/json
      description: remove related model to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceRemoveRequest'
      responses:
        "204":
          description: ""
      summary: RemoveRelatedModel
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: add related model to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceAddRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.ResourceDTO'
      summary: AddRelatedModel
      tags:
      - Project
  /v1/project/{owner}/{id}/tags:
    put:
      consumes:
      - application/json
      description: set tags for project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of tags
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.resourceTagsUpdateRequest'
      responses:
        "202":
          description: ""
      summary: SetTags
      tags:
      - Project
  /v1/project/{owner}/{name}:
    get:
      consumes:
      - application/json
      description: get project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.projectDetail'
      summary: Get
      tags:
      - Project
  /v1/project/{owner}/{name}/check:
    get:
      consumes:
      - application/json
      description: check whether the name can be applied to create a new project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.canApplyResourceNameResp'
      summary: Check
      tags:
      - Project
  /v1/repo/:type/{name}/file/{path}:
    delete:
      consumes:
      - application/json
      description: Delete repo file
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Delete
      tags:
      - RepoFile
    post:
      consumes:
      - application/json
      description: create repo file
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      - description: body of creating repo file
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.RepoFileCreateRequest'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - RepoFile
    put:
      consumes:
      - application/json
      description: update repo file
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      - description: body of updating repo file
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.RepoFileUpdateRequest'
      responses:
        "202":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Update
      tags:
      - RepoFile
  /v1/repo/:type/{user}/{name}/file/{path}:
    get:
      consumes:
      - application/json
      description: Download repo file
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.RepoFileDownloadDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Download
      tags:
      - RepoFile
  /v1/repo/:type/{user}/{name}/file/{path}/preview:
    get:
      consumes:
      - application/json
      description: preview repo file
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "200":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Preview
      tags:
      - RepoFile
  /v1/repo/:type/{user}/{name}/files:
    get:
      consumes:
      - application/json
      description: list repo file in a path
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: query
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.RepoPathItem'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - RepoFile
  /v1/search:
    get:
      consumes:
      - application/json
      description: search resource and user
      parameters:
      - description: name of resource or user
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.SearchDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Search
  /v1/tags/{type}:
    get:
      consumes:
      - application/json
      description: list tags
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.DomainTagsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Tags
  /v1/train/project/{pid}/training:
    get:
      consumes:
      - application/json
      description: get trainings
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TrainingSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Training
    post:
      consumes:
      - application/json
      description: create training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: body of creating training
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.TrainingCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.trainingCreateResp'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - Training
  /v1/train/project/{pid}/training/{id}:
    delete:
      consumes:
      - application/json
      description: delete training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Delete
      tags:
      - Training
    get:
      consumes:
      - application/json
      description: get training info
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.trainingDetail'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - Training
    post:
      consumes:
      - application/json
      description: recreate training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.trainingCreateResp'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Recreate
      tags:
      - Training
    put:
      consumes:
      - application/json
      description: terminate training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "202":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Terminate
      tags:
      - Training
  /v1/train/project/{pid}/training/{id}/result/{type}:
    get:
      consumes:
      - application/json
      description: get log url of training for downloading
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      - description: 'training result: log, output'
        in: path
        name: type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.trainingLogResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetLog
      tags:
      - Training
  /v1/train/project/{pid}/training/ws:
    get:
      consumes:
      - application/json
      description: get trainings
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TrainingSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Training
  /v1/user:
    get:
      consumes:
      - application/json
      description: get user
      parameters:
      - description: account
        in: query
        name: account
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.userDetail'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - User
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: body of creating user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.userCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user basic info
      parameters:
      - description: body of updating user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.userBasicInfoUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - User
  /v1/user/activity/{account}:
    get:
      consumes:
      - application/json
      description: list activitys
      parameters:
      - description: the account the activities belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ActivityDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Activity
  /v1/user/follower/{account}:
    get:
      consumes:
      - application/json
      description: list followers
      parameters:
      - description: the account the followers belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FollowsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Follower
  /v1/user/following:
    post:
      consumes:
      - application/json
      description: add a following
      parameters:
      - description: body of creating following
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.followingCreateRequest'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "404":
          description: Not Found
          schema:
            type: duplicate_creating
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
  /v1/user/following/{account}:
    delete:
      consumes:
      - application/json
      description: remove a following
      parameters:
      - description: the account of following
        in: path
        name: account
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
    get:
      consumes:
      - application/json
      description: list followings
      parameters:
      - description: the account the followings belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FollowsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
  /v1/user/like:
    delete:
      consumes:
      - application/json
      description: delete a like
      parameters:
      - description: body of deleting like
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.likeDeleteRequest'
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
    post:
      consumes:
      - application/json
      description: create a like
      parameters:
      - description: body of creating like
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.likeCreateRequest'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "404":
          description: Not Found
          schema:
            type: duplicate_creating
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
  /v1/user/like/{account}:
    get:
      consumes:
      - application/json
      description: list likes
      parameters:
      - description: the account the likes belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LikeDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
swagger: "2.0"
