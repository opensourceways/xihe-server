definitions:
  app.ActivityDTO:
    properties:
      resource:
        $ref: '#/definitions/app.ResourceDTO'
      time:
        type: string
      type:
        type: string
    type: object
  app.DatasetDTO:
    properties:
      desc:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  app.FollowDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
    type: object
  app.LikeDTO:
    properties:
      resource:
        $ref: '#/definitions/app.ResourceDTO'
      time:
        type: string
    type: object
  app.LoginDTO:
    properties:
      info:
        type: string
    type: object
  app.ModelDTO:
    properties:
      desc:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  app.ResourceDTO:
    properties:
      cover_id:
        type: string
      description:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        properties:
          avatar_id:
            type: string
          name:
            type: string
        type: object
      type:
        type: string
      update_at:
        type: string
    type: object
  app.UserDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
    type: object
  controller.datasetCreateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
    type: object
  controller.followingCreateRequest:
    properties:
      account:
        type: string
    type: object
  controller.likeCreateRequest:
    properties:
      name:
        type: string
      owner:
        type: string
    type: object
  controller.likeDeleteRequest:
    properties:
      name:
        type: string
      owner:
        type: string
    type: object
  controller.modelCreateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
    type: object
  controller.platformInfo:
    properties:
      token:
        type: string
    type: object
  controller.projectCreateRequest:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
      training:
        type: string
      type:
        type: string
    type: object
  controller.projectUpdateRequest:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      name:
        type: string
      tags:
        description: json [] will be converted to []string
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  controller.userCreateRequest:
    properties:
      account:
        type: string
      password:
        type: string
    type: object
  controller.userDetail:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      email:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
      is_follower:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - application/json
      description: callback of authentication by authing
      parameters:
      - description: authing code
        in: query
        name: code
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
        "501":
          description: Not Implemented
          schema:
            type: duplicate_creating
      tags:
      - Login
  /{account}:
    get:
      consumes:
      - application/json
      description: get info of login
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LoginDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Login
  /{account}/gitlab:
    get:
      consumes:
      - application/json
      description: get code platform info of user
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.platformInfo'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      tags:
      - User
  /v1/dataset:
    post:
      consumes:
      - application/json
      description: create dataset
      parameters:
      - description: body of creating dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.datasetCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.DatasetDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - Dataset
  /v1/dataset/{owner}:
    get:
      consumes:
      - application/json
      description: list dataset
      produces:
      - application/json
      responses: {}
      summary: List
      tags:
      - Dataset
  /v1/dataset/{owner}/{id}:
    get:
      consumes:
      - application/json
      description: get dataset
      parameters:
      - description: id of dataset
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.DatasetDTO'
      summary: Get
      tags:
      - Dataset
  /v1/model:
    post:
      consumes:
      - application/json
      description: create model
      parameters:
      - description: body of creating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.modelCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.ModelDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - Model
  /v1/model/{owner}:
    get:
      consumes:
      - application/json
      description: list model
      produces:
      - application/json
      responses: {}
      summary: List
      tags:
      - Model
  /v1/model/{owner}/{id}:
    get:
      consumes:
      - application/json
      description: get model
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ModelDTO'
      summary: Get
      tags:
      - Model
  /v1/project:
    post:
      consumes:
      - application/json
      description: create project
      parameters:
      - description: body of creating project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectCreateRequest'
      produces:
      - application/json
      responses: {}
      summary: Create
      tags:
      - Project
  /v1/project/{owner}:
    get:
      consumes:
      - application/json
      description: list project
      produces:
      - application/json
      responses: {}
      summary: List
      tags:
      - Project
  /v1/project/{owner}/{id}:
    get:
      consumes:
      - application/json
      description: get project
      parameters:
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: fork project
      parameters:
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Fork
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: update project
      parameters:
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of updating project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Project
  /v1/user:
    get:
      consumes:
      - application/json
      description: get user
      parameters:
      - description: account
        in: query
        name: account
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.userDetail'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - User
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: body of creating user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.userCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user basic info
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - User
  /v1/user/activity:
    get:
      consumes:
      - application/json
      description: list activitys
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ActivityDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Activity
  /v1/user/follower:
    get:
      consumes:
      - application/json
      description: list followers
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FollowDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Follower
  /v1/user/following:
    get:
      consumes:
      - application/json
      description: list followings
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FollowDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
    post:
      consumes:
      - application/json
      description: add a following
      parameters:
      - description: body of creating following
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.followingCreateRequest'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "404":
          description: Not Found
          schema:
            type: duplicate_creating
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
  /v1/user/following/{account}:
    delete:
      consumes:
      - application/json
      description: remove a following
      parameters:
      - description: the account of following
        in: path
        name: account
        required: true
        type: string
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
  /v1/user/like:
    delete:
      consumes:
      - application/json
      description: delete a like
      parameters:
      - description: body of deleting like
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.likeDeleteRequest'
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
    get:
      consumes:
      - application/json
      description: list likes
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LikeDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
    post:
      consumes:
      - application/json
      description: create a like
      parameters:
      - description: body of creating like
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.likeCreateRequest'
      responses:
        "201":
          description: ""
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "404":
          description: Not Found
          schema:
            type: duplicate_creating
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
swagger: "2.0"
