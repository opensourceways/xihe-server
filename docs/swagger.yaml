definitions:
  app.AICCFinetuneSummaryDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      duration:
        type: integer
      error:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      name:
        type: string
      status:
        type: string
      task:
        type: string
    type: object
  app.AIQuestionDTO:
    properties:
      answer:
        type: string
      choices:
        items:
          $ref: '#/definitions/app.ChoiceQuestionDTO'
        type: array
      completions:
        items:
          $ref: '#/definitions/app.CompletionQuestionDTO'
        type: array
      times:
        type: integer
    type: object
  app.ActivityDTO:
    properties:
      resource:
        $ref: '#/definitions/app.ResourceDTO'
      time:
        type: string
      type:
        type: string
    type: object
  app.AgreementType:
    enum:
    - course
    - finetune
    - user
    type: string
    x-enum-varnames:
    - Course
    - Finetune
    - User
  app.ApiApplyRecordDTO:
    properties:
      apply_at:
        type: string
      enabled:
        type: boolean
      endpoint:
        type: string
      model_name:
        type: string
      name:
        type: string
      update_at:
        type: string
      user:
        type: string
    type: object
  app.ApiInfoDTO:
    properties:
      doc:
        type: string
      endpoint:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  app.AsgDTO:
    properties:
      asg_id:
        type: string
      asg_name:
        type: string
      course_name:
        type: string
      deadline:
        type: string
      desc:
        type: string
    type: object
  app.AsgWorkDTO:
    properties:
      deadline:
        type: string
      desc:
        type: string
      id:
        type: string
      name:
        type: string
      score:
        type: number
      status:
        type: string
    type: object
  app.BaiChuanDTO:
    properties:
      text:
        type: string
    type: object
  app.CertInfoDTO:
    properties:
      cert:
        type: string
      is_pass:
        type: boolean
      name:
        type: string
      owner:
        type: string
    type: object
  app.ChallengeCompetitorInfoDTO:
    properties:
      ai_question:
        properties:
          in_progress:
            type: boolean
          remaining_times:
            type: integer
        type: object
      is_competitor:
        type: boolean
      score:
        type: integer
    type: object
  app.ChallengeRankingDTO:
    properties:
      competitor:
        type: string
      score:
        type: integer
    type: object
  app.ChoiceQuestionDTO:
    properties:
      desc:
        type: string
      options:
        items:
          type: string
        type: array
    type: object
  app.CloudDTO:
    properties:
      credit:
        type: integer
      feature:
        type: string
      has_holding:
        type: boolean
      id:
        type: string
      images:
        items:
          type: string
        type: array
      is_idle:
        type: boolean
      name:
        type: string
      processor:
        type: string
      specs:
        items:
          $ref: '#/definitions/app.Spec'
        type: array
    type: object
  app.CompetitionRankingDTO:
    properties:
      final:
        items:
          $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.RankingDTO'
        type: array
      preliminary:
        items:
          $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.RankingDTO'
        type: array
    type: object
  app.CompletionQuestionDTO:
    properties:
      desc:
        type: string
      info:
        type: string
    type: object
  app.CourseDTO:
    properties:
      count:
        type: integer
      desc:
        type: string
      doc:
        type: string
      duration:
        type: string
      forum:
        type: string
      host:
        type: string
      hours:
        type: integer
      id:
        type: string
      is_apply:
        type: boolean
      name:
        type: string
      poster:
        type: string
      sections:
        items:
          $ref: '#/definitions/app.SectionDTO'
        type: array
      status:
        type: string
      teacher:
        type: string
      type:
        type: string
    type: object
  app.CourseSummaryDTO:
    properties:
      count:
        type: integer
      desc:
        type: string
      duration:
        type: string
      host:
        type: string
      hours:
        type: integer
      id:
        type: string
      name:
        type: string
      poster:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  app.DatasetDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.DatasetSummaryDTO:
    properties:
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.DomainTagsDTO:
    properties:
      domain:
        type: string
      items:
        items:
          $ref: '#/definitions/domain.Tags'
        type: array
      name:
        type: string
    type: object
  app.FinetuneSummaryDTO:
    properties:
      created_at:
        type: string
      duration:
        type: integer
      error:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      name:
        type: string
      status:
        type: string
    type: object
  app.FollowDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      is_follower:
        type: boolean
    type: object
  app.FollowsDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/app.FollowDTO'
        type: array
      total:
        type: integer
    type: object
  app.GlobalDatasetDTO:
    properties:
      avatar_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.GlobalDatasetsDTO:
    properties:
      projects:
        items:
          $ref: '#/definitions/app.GlobalDatasetDTO'
        type: array
      total:
        type: integer
    type: object
  app.GlobalModelDTO:
    properties:
      avatar_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.GlobalModelsDTO:
    properties:
      projects:
        items:
          $ref: '#/definitions/app.GlobalModelDTO'
        type: array
      total:
        type: integer
    type: object
  app.GlobalProjectDTO:
    properties:
      avatar_id:
        type: string
      cover_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      level:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.GlobalProjectsDTO:
    properties:
      projects:
        items:
          $ref: '#/definitions/app.GlobalProjectDTO'
        type: array
      total:
        type: integer
    type: object
  app.InferenceDTO:
    properties:
      access_url:
        type: string
      error:
        type: string
      inference_id:
        type: string
    type: object
  app.KeyValueDTO:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  app.LessonDTO:
    properties:
      desc:
        type: string
      id:
        type: string
      name:
        type: string
      points:
        items:
          $ref: '#/definitions/app.PointDTO'
        type: array
      video:
        type: string
    type: object
  app.LikeDTO:
    properties:
      resource:
        $ref: '#/definitions/app.ResourceDTO'
      time:
        type: string
    type: object
  app.LoginDTO:
    properties:
      email:
        type: string
      info:
        type: string
      user_id:
        type: string
    type: object
  app.ModelDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.ModelSummaryDTO:
    properties:
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.PodInfoDTO:
    properties:
      access_url:
        type: string
      cloud_id:
        type: string
      created_at:
        type: integer
      error:
        type: string
      expiry:
        type: integer
      id:
        type: string
      image:
        type: string
      owner:
        type: string
      spec:
        type: string
      status:
        type: string
    type: object
  app.PointDTO:
    properties:
      id:
        type: string
      name:
        type: string
      video:
        type: string
    type: object
  app.PointsDetailDTO:
    properties:
      desc:
        type: string
      id:
        description: serial number
        type: string
      points:
        type: integer
      task:
        type: string
      time:
        type: string
    type: object
  app.ProjectSummaryDTO:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      level:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  app.ProjectSummuryDTO:
    properties:
      cover_id:
        type: string
      create_at:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      like_count:
        type: integer
      name:
        type: string
      owner:
        type: string
    type: object
  app.PromotionDTO:
    properties:
      desc:
        type: string
      duration:
        type: string
      host:
        type: string
      id:
        type: string
      intro:
        type: string
      is_register:
        type: boolean
      is_static:
        type: boolean
      name:
        type: string
      poster:
        type: string
      registrants_num:
        type: integer
      status:
        type: string
      total:
        type: integer
      type:
        type: string
      way:
        type: string
    type: object
  app.PromotionsDTO:
    properties:
      items:
        items:
          $ref: '#/definitions/app.PromotionDTO'
        type: array
      total:
        type: integer
    type: object
  app.RelateProjectDTO:
    properties:
      related_project:
        items:
          $ref: '#/definitions/app.ProjectSummuryDTO'
        type: array
    type: object
  app.RepoFileDownloadDTO:
    properties:
      content:
        type: string
      download_url:
        type: string
    type: object
  app.RepoPathItem:
    properties:
      is_dir:
        type: boolean
      is_lfs_file:
        type: boolean
      name:
        type: string
      path:
        type: string
    type: object
  app.ResourceDTO:
    properties:
      cover_id:
        type: string
      description:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      level:
        type: string
      like_count:
        type: integer
      name:
        type: string
      owner:
        properties:
          avatar_id:
            type: string
          name:
            type: string
        type: object
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        type: string
      update_at:
        type: string
    type: object
  app.ResourceSearchDTO:
    properties:
      top:
        items:
          $ref: '#/definitions/app.ResourceSummaryDTO'
        type: array
      total:
        type: integer
    type: object
  app.ResourceSummaryDTO:
    properties:
      name:
        type: string
      owner:
        type: string
    type: object
  app.SearchDTO:
    properties:
      dataset:
        $ref: '#/definitions/app.ResourceSearchDTO'
      model:
        $ref: '#/definitions/app.ResourceSearchDTO'
      project:
        $ref: '#/definitions/app.ResourceSearchDTO'
      user:
        $ref: '#/definitions/app.UserSearchDTO'
    type: object
  app.SectionDTO:
    properties:
      id:
        type: string
      lessons:
        items:
          $ref: '#/definitions/app.LessonDTO'
        type: array
      name:
        type: string
    type: object
  app.Spec:
    properties:
      cards_num:
        type: integer
      desc:
        type: string
    type: object
  app.TaskCompletionInfoDTO:
    properties:
      addr:
        type: string
      completed:
        type: boolean
      name:
        type: string
      points:
        type: integer
    type: object
  app.TaskDocDTO:
    properties:
      content:
        type: string
    type: object
  app.TasksCompletionInfoDTO:
    properties:
      kind:
        type: string
      tasks:
        items:
          $ref: '#/definitions/app.TaskCompletionInfoDTO'
        type: array
    type: object
  app.TrainingConfigDTO:
    properties:
      boot_file:
        type: string
      code_dir:
        type: string
      compute:
        $ref: '#/definitions/github_com_opensourceways_xihe-server_app.ComputeDTO'
      desc:
        type: string
      enable_aim:
        type: boolean
      enable_output:
        type: boolean
      env:
        items:
          $ref: '#/definitions/app.KeyValueDTO'
        type: array
      hyperparameter:
        items:
          $ref: '#/definitions/app.KeyValueDTO'
        type: array
      inputs:
        items:
          $ref: '#/definitions/app.TrainingRefDTO'
        type: array
      name:
        type: string
    type: object
  app.TrainingRefDTO:
    properties:
      File:
        type: string
      key:
        type: string
      name:
        type: string
      owner:
        type: string
      type:
        type: string
    type: object
  app.TrainingSummaryDTO:
    properties:
      created_at:
        type: string
      desc:
        type: string
      duration:
        type: integer
      error:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      name:
        type: string
      status:
        type: string
    type: object
  app.UploadDataDTO:
    properties:
      file_name:
        type: string
      status:
        type: string
      upload_at:
        type: integer
    type: object
  app.UserDTO:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      course_agreement:
        type: string
      email:
        type: string
      finetune_agreement:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
      user_agreement:
        type: string
    type: object
  app.UserFinetunesDTO:
    properties:
      data:
        items:
          $ref: '#/definitions/app.FinetuneSummaryDTO'
        type: array
      expiry:
        type: integer
    type: object
  app.UserPointsDetailsDTO:
    properties:
      details:
        items:
          $ref: '#/definitions/app.PointsDetailDTO'
        type: array
      total:
        type: integer
    type: object
  app.UserRegisterInfoDTO:
    properties:
      account: {}
      city: {}
      detail:
        additionalProperties:
          type: string
        type: object
      email: {}
      identity: {}
      name: {}
      phone: {}
      province: {}
      version:
        type: integer
    type: object
  app.UserSearchDTO:
    properties:
      top:
        items:
          type: string
        type: array
      total:
        type: integer
    type: object
  app.WhitelistDTO:
    properties:
      allowed:
        type: boolean
      item:
        type: string
    type: object
  app.WuKongRankDTO:
    properties:
      rank:
        type: integer
    type: object
  controller.AICCKeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  controller.AddCourseRelatedProjectRequest:
    properties:
      owner:
        type: string
      project_name:
        type: string
    type: object
  controller.AddRelatedProjectRequest:
    properties:
      owner:
        type: string
      project_name:
        type: string
    type: object
  controller.ChangeTeamNameRequest:
    properties:
      team_name:
        type: string
    type: object
  controller.CompetitorApplyRequest:
    properties:
      agreement:
        type: boolean
      city:
        type: string
      detail:
        additionalProperties:
          type: string
        type: object
      email:
        type: string
      identity:
        type: string
      name:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  controller.Compute:
    properties:
      flavor:
        type: string
      type:
        type: string
      version:
        type: string
    type: object
  controller.CreateTeamRequest:
    properties:
      team_name:
        type: string
    type: object
  controller.DeleteMemberRequest:
    properties:
      competitor_account:
        type: string
    type: object
  controller.EmailCode:
    properties:
      code:
        type: string
      email:
        type: string
    type: object
  controller.FinetuneCreateRequest:
    properties:
      hyperparameter:
        items:
          $ref: '#/definitions/controller.KeyValue'
        type: array
      model:
        type: string
      name:
        type: string
      task:
        type: string
    type: object
  controller.JoinTeamRequest:
    properties:
      leader_account:
        type: string
    type: object
  controller.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  controller.PlayRecordRequest:
    properties:
      finish_count:
        type: integer
      lesson_id:
        type: string
      play_count:
        type: integer
      point_id:
        type: string
      section_id:
        type: string
    type: object
  controller.PromotionApplyReq:
    properties:
      city:
        type: string
      detail:
        additionalProperties:
          type: string
        type: object
      email:
        type: string
      identity:
        type: string
      name:
        type: string
      origin:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  controller.RepoFileCreateRequest:
    properties:
      base64_encoded:
        type: boolean
      content:
        type: string
    type: object
  controller.RepoFileUpdateRequest:
    properties:
      base64_encoded:
        type: boolean
      content:
        type: string
    type: object
  controller.StudentApplyRequest:
    properties:
      agreement:
        type: boolean
      city:
        type: string
      detail:
        additionalProperties:
          type: string
        type: object
      email:
        type: string
      identity:
        type: string
      name:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  controller.TrainingCreateRequest:
    properties:
      boot_file:
        type: string
      code_dir:
        type: string
      compute:
        $ref: '#/definitions/controller.Compute'
      datasets:
        items:
          $ref: '#/definitions/controller.TrainingRef'
        type: array
      desc:
        type: string
      enable_aim:
        type: boolean
      enable_output:
        type: boolean
      env:
        items:
          $ref: '#/definitions/controller.KeyValue'
        type: array
      hyperparameter:
        items:
          $ref: '#/definitions/controller.KeyValue'
        type: array
      models:
        items:
          $ref: '#/definitions/controller.TrainingRef'
        type: array
      name:
        type: string
    type: object
  controller.TrainingRef:
    properties:
      File:
        type: string
      key:
        type: string
      name:
        type: string
      owner:
        type: string
    type: object
  controller.TransferLeaderRequest:
    properties:
      competitor_account:
        type: string
    type: object
  controller.UserAgreement:
    properties:
      type:
        $ref: '#/definitions/app.AgreementType'
    type: object
  controller.UserBasicInfoUpdateRequest:
    properties:
      avatar_id:
        type: string
      bio:
        type: string
    type: object
  controller.UserInfoUpdateRequest:
    properties:
      avatar_id:
        type: string
      bio:
        type: string
      city:
        type: string
      detail:
        additionalProperties:
          type: string
        type: object
      email:
        type: string
      identity:
        type: string
      name:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  controller.aiDetectorReq:
    properties:
      lang:
        type: string
      text:
        type: string
    type: object
  controller.aiDetectorResp:
    properties:
      is_machine:
        type: boolean
    type: object
  controller.aiQuestionAnswerSubmitRequest:
    properties:
      answer:
        type: string
      result:
        items:
          type: string
        type: array
      times:
        type: integer
    type: object
  controller.aiQuestionAnswerSubmitResp:
    properties:
      score:
        type: integer
    type: object
  controller.aiccFinetuneCreateRequest:
    properties:
      desc:
        type: string
      env:
        items:
          $ref: '#/definitions/controller.AICCKeyValue'
        type: array
      hyperparameter:
        items:
          $ref: '#/definitions/controller.AICCKeyValue'
        type: array
      name:
        type: string
      task:
        type: string
    type: object
  controller.aiccFinetuneCreateResp:
    properties:
      id:
        type: string
    type: object
  controller.aiccFinetuneDetail:
    properties:
      created_at:
        type: string
      desc:
        type: string
      duration:
        type: integer
      error:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      log:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  controller.aiccFinetuneLogResp:
    properties:
      log_url:
        type: string
    type: object
  controller.applyApiReq:
    properties:
      agreement:
        type: boolean
      city:
        type: string
      detail:
        additionalProperties:
          type: string
        type: object
      email:
        type: string
      identity:
        type: string
      name:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  controller.baichuanReq:
    properties:
      repetition_penalty:
        type: number
      sampling:
        type: boolean
      temperature:
        type: number
      text:
        type: string
      top_k:
        type: integer
      top_p:
        type: number
    type: object
  controller.canApplyResourceNameResp:
    properties:
      can_apply:
        type: boolean
    type: object
  controller.cloudSubscribeRequest:
    properties:
      cards_num:
        minimum: 1
        type: integer
      cloud_id:
        type: string
      image:
        type: string
    required:
    - cards_num
    - image
    type: object
  controller.competitorApplyRequest:
    properties:
      agreement:
        type: boolean
      city:
        type: string
      detail:
        additionalProperties:
          type: string
        type: object
      email:
        type: string
      identity:
        type: string
      name:
        type: string
      phone:
        type: string
      province:
        type: string
    type: object
  controller.datasetCreateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  controller.datasetDetail:
    properties:
      avatar_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      related_models:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      related_projects:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  controller.datasetUpdateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  controller.datasetsInfo:
    properties:
      avatar_id:
        type: string
      datasets:
        items:
          $ref: '#/definitions/app.DatasetSummaryDTO'
        type: array
      owner:
        type: string
      total:
        type: integer
    type: object
  controller.finetuneCreateResp:
    properties:
      id:
        type: string
    type: object
  controller.finetuneLog:
    properties:
      log:
        type: string
    type: object
  controller.followingCreateRequest:
    properties:
      account:
        type: string
    type: object
  controller.glm2Request:
    properties:
      history:
        items:
          items:
            type: string
          type: array
        type: array
      repetition_penalty:
        type: number
      sampling:
        type: boolean
      temperature:
        type: number
      text:
        type: string
      top_k:
        type: integer
      top_p:
        type: number
    type: object
  controller.homeElectricityInfo:
    properties:
      comp:
        items:
          $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionSummaryDTO'
        type: array
      course:
        items:
          $ref: '#/definitions/app.CourseSummaryDTO'
        type: array
      dataset:
        $ref: '#/definitions/app.GlobalDatasetsDTO'
      model:
        $ref: '#/definitions/app.GlobalModelsDTO'
      project:
        $ref: '#/definitions/app.GlobalProjectsDTO'
    type: object
  controller.homeInfo:
    properties:
      comp:
        items:
          $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionSummaryDTO'
        type: array
      course:
        items:
          $ref: '#/definitions/app.CourseSummaryDTO'
        type: array
    type: object
  controller.iflyteksparkRequest:
    properties:
      repetition_penalty:
        type: number
      sampling:
        type: boolean
      temperature:
        type: number
      text:
        type: string
      top_k:
        type: integer
    type: object
  controller.isApplyResp:
    properties:
      is_apply:
        type: boolean
    type: object
  controller.likeCreateRequest:
    properties:
      name:
        type: string
      owner:
        type: string
      resource_type:
        type: string
    type: object
  controller.likeDeleteRequest:
    properties:
      name:
        type: string
      owner:
        type: string
      resource_type:
        type: string
    type: object
  controller.llama2Request:
    properties:
      history:
        items:
          items:
            type: string
          type: array
        type: array
      repetition_penalty:
        type: number
      sampling:
        type: boolean
      temperature:
        type: number
      text:
        type: string
      top_k:
        type: integer
      top_p:
        type: number
    type: object
  controller.luojiaResp:
    properties:
      answer:
        type: string
    type: object
  controller.modelCreateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  controller.modelDetail:
    properties:
      avatar_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      related_datasets:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      related_projects:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  controller.modelUpdateRequest:
    properties:
      desc:
        type: string
      name:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  controller.modelsInfo:
    properties:
      avatar_id:
        type: string
      models:
        items:
          $ref: '#/definitions/app.ModelSummaryDTO'
        type: array
      owner:
        type: string
      total:
        type: integer
    type: object
  controller.newApiTokenResp:
    properties:
      date:
        type: string
      token:
        type: string
    type: object
  controller.pictureUploadResp:
    properties:
      path:
        type: string
    type: object
  controller.platformInfo:
    properties:
      create_at:
        type: integer
    type: object
  controller.projectCreateRequest:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      training:
        type: string
      type:
        type: string
    type: object
  controller.projectDetail:
    properties:
      avatar_id:
        type: string
      cover_id:
        type: string
      created_at:
        type: string
      desc:
        type: string
      download_count:
        type: integer
      fork_count:
        type: integer
      id:
        type: string
      like_count:
        type: integer
      liked:
        type: boolean
      name:
        type: string
      owner:
        type: string
      protocol:
        type: string
      related_datasets:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      related_models:
        items:
          $ref: '#/definitions/app.ResourceDTO'
        type: array
      repo_id:
        type: string
      repo_type:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      training:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  controller.projectForkRequest:
    properties:
      desc:
        type: string
      name:
        type: string
    type: object
  controller.projectUpdateRequest:
    properties:
      cover_id:
        type: string
      desc:
        type: string
      name:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  controller.projectsInfo:
    properties:
      avatar_id:
        type: string
      owner:
        type: string
      projects:
        items:
          $ref: '#/definitions/app.ProjectSummaryDTO'
        type: array
      total:
        type: integer
    type: object
  controller.relatedResourceAddRequest:
    properties:
      name:
        type: string
      owner:
        type: string
    type: object
  controller.relatedResourceRemoveRequest:
    properties:
      id:
        type: string
      owner:
        type: string
    type: object
  controller.resourceTagsUpdateRequest:
    properties:
      add:
        items:
          type: string
        type: array
      remove:
        items:
          type: string
        type: array
    type: object
  controller.responseData:
    properties:
      code:
        type: string
      data: {}
      msg:
        type: string
    type: object
  controller.skyWorkRequest:
    properties:
      history:
        items:
          items:
            type: string
          type: array
        type: array
      repetition_penalty:
        type: number
      sampling:
        type: boolean
      temperature:
        type: number
      text:
        type: string
      top_k:
        type: integer
      top_p:
        type: number
    type: object
  controller.trainingCreateResp:
    properties:
      id:
        type: string
    type: object
  controller.trainingDetail:
    properties:
      aim_path:
        type: string
      compute:
        $ref: '#/definitions/github_com_opensourceways_xihe-server_app.ComputeDTO'
      created_at:
        type: string
      desc:
        type: string
      duration:
        type: integer
      enable_aim:
        type: boolean
      error:
        type: string
      id:
        type: string
      is_done:
        type: boolean
      log:
        type: string
      name:
        type: string
      project_id:
        type: string
      status:
        type: string
    type: object
  controller.trainingLogResp:
    properties:
      log_url:
        type: string
    type: object
  controller.userDetail:
    properties:
      account:
        type: string
      avatar_id:
        type: string
      bio:
        type: string
      course_agreement:
        type: string
      email:
        type: string
      finetune_agreement:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        type: string
      is_follower:
        type: boolean
      points:
        type: integer
      user_agreement:
        type: string
    type: object
  controller.wukongAddLikeResp:
    properties:
      id:
        type: string
    type: object
  controller.wukongAddPublicResp:
    properties:
      id:
        type: string
    type: object
  controller.wukongCancelDiggPublicRequest:
    properties:
      id:
        type: string
      user:
        type: string
    type: object
  controller.wukongDiggResp:
    properties:
      digg_count:
        type: integer
    type: object
  controller.wukongPictureLink:
    properties:
      link:
        type: string
    type: object
  controller.wukongPicturesGenerateResp:
    properties:
      pictures:
        additionalProperties:
          type: string
        type: object
    type: object
  controller.wukongRequest:
    properties:
      desc:
        type: string
      img_quantity:
        type: integer
      style:
        type: string
    type: object
  domain.Tags:
    properties:
      items:
        items:
          type: string
        type: array
      kind:
        type: string
    type: object
  github_com_opensourceways_xihe-server_app.ComputeDTO:
    properties:
      flavor:
        type: string
      type:
        type: string
      version:
        type: string
    type: object
  github_com_opensourceways_xihe-server_bigmodel_app.LuoJiaRecordDTO:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  github_com_opensourceways_xihe-server_bigmodel_app.WuKongLikeDTO:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      desc:
        type: string
      id:
        type: string
      is_public:
        type: boolean
      link:
        type: string
      owner:
        description: owner of picture
        type: string
      style:
        type: string
    type: object
  github_com_opensourceways_xihe-server_bigmodel_app.WuKongPublicDTO:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      desc:
        type: string
      digg_count:
        type: integer
      id:
        type: string
      is_digg:
        type: boolean
      is_like:
        type: boolean
      like_id:
        type: string
      link:
        type: string
      owner:
        description: owner of picture
        type: string
      style:
        type: string
    type: object
  github_com_opensourceways_xihe-server_competition_app.CompetitionSubmissionDTO:
    properties:
      file_name:
        type: string
      score:
        type: number
      status:
        type: string
      submit_at:
        type: string
    type: object
  github_com_opensourceways_xihe-server_competition_app.CompetitionSubmissionsDTO:
    properties:
      details:
        items:
          $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionSubmissionDTO'
        type: array
      project:
        type: string
    type: object
  github_com_opensourceways_xihe-server_competition_app.CompetitionSummaryDTO:
    properties:
      bonus:
        type: integer
      count:
        type: integer
      desc:
        type: string
      duration:
        type: string
      host:
        type: string
      id:
        type: string
      lang:
        type: string
      name:
        type: string
      poster:
        type: string
      status:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  github_com_opensourceways_xihe-server_competition_app.CompetitionTeamDTO:
    properties:
      members:
        items:
          $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionTeamMemberDTO'
        type: array
      name:
        type: string
    type: object
  github_com_opensourceways_xihe-server_competition_app.CompetitionTeamMemberDTO:
    properties:
      account:
        type: string
      email:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  github_com_opensourceways_xihe-server_competition_app.RankingDTO:
    properties:
      score:
        type: number
      submit_at:
        type: string
      team_name:
        type: string
    type: object
  github_com_opensourceways_xihe-server_competition_app.UserCompetitionDTO:
    properties:
      bonus:
        type: integer
      count:
        type: integer
      dataset_doc:
        type: string
      dataset_url:
        type: string
      desc:
        type: string
      doc:
        type: string
      duration:
        type: string
      forum:
        type: string
      host:
        type: string
      id:
        type: string
      is_competitor:
        type: boolean
      is_finalist:
        type: boolean
      lang:
        type: string
      name:
        type: string
      phase:
        type: string
      poster:
        type: string
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      team_id:
        type: string
      team_role:
        type: string
      type:
        type: string
      winners:
        type: string
    type: object
info:
  contact: {}
paths:
  /{account}/gitlab:
    get:
      consumes:
      - application/json
      description: get code platform info of user
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.platformInfo'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      tags:
      - User
  /{account}/gitlab/refresh:
    post:
      consumes:
      - application/json
      description: refresh platform token of user
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            type: created
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
      tags:
      - User
  /v1/aiccfinetune/{model}:
    get:
      consumes:
      - application/json
      description: get AICC finetunes
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.AICCFinetuneSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - AICC Finetune
    post:
      consumes:
      - application/json
      description: create aicc finetune
      parameters:
      - description: model name
        in: path
        name: model
        required: true
        type: string
      - description: body of creating aicc finetune
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.aiccFinetuneCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.aiccFinetuneCreateResp'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - AICC Finetune
  /v1/aiccfinetune/{model}/{id}:
    delete:
      consumes:
      - application/json
      description: delete AICC Finetune
      parameters:
      - description: model name
        in: path
        name: model
        required: true
        type: string
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Delete
      tags:
      - AICC Finetune
    get:
      consumes:
      - application/json
      description: get AICC finetune info
      parameters:
      - description: model name
        in: path
        name: model
        required: true
        type: string
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.aiccFinetuneDetail'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - AICC Finetune
    put:
      consumes:
      - application/json
      description: terminate AICC Finetune
      parameters:
      - description: model name
        in: path
        name: model
        required: true
        type: string
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Terminate
      tags:
      - AICC Finetune
  /v1/aiccfinetune/{model}/{id}/result/{type}:
    get:
      consumes:
      - application/json
      description: get log url of AICC Finetune for downloading
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      - description: 'aicc finetune result: log, output'
        in: path
        name: type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.aiccFinetuneLogResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetLog
      tags:
      - AICC Finetune
  /v1/aiccfinetune/{model}/{task}/data:
    post:
      consumes:
      - application/json
      description: Upload Data
      parameters:
      - description: model name
        in: path
        name: model
        required: true
        type: string
      - description: result file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.UploadDataDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: UploadData
      tags:
      - AICC Finetune
  /v1/aiccfinetune/{model}/ws:
    get:
      consumes:
      - application/json
      description: get AICC Finetunes
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.AICCFinetuneSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - AICC Finetune
  /v1/bigmodel/ai_detector:
    post:
      consumes:
      - application/json
      description: detect if text generate by ai
      parameters:
      - description: body of ai detector
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.aiDetectorReq'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.aiDetectorResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/api/{model}:
    post:
      consumes:
      - application/json
      description: generates pictures by WuKong
      parameters:
      - description: body of wukong
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.wukongRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.wukongPicturesGenerateResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/api/apply/{model}:
    get:
      consumes:
      - application/json
      description: is user applied for api
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.isApplyResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
    post:
      consumes:
      - application/json
      description: generates pictures by WuKong-hf
      parameters:
      - description: body of wukong
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.applyApiReq'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.newApiTokenResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/api/get/:
    get:
      consumes:
      - application/json
      description: get user apply record
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiApplyRecordDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/api/refresh/{model}:
    get:
      consumes:
      - application/json
      description: refresh api token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.newApiTokenResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/apiinfo/get/{model}:
    get:
      consumes:
      - application/json
      description: get api info
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ApiInfoDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/baichuan2_7b_chat:
    post:
      consumes:
      - application/json
      description: conversational AI
      parameters:
      - description: body of baichuan
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.baichuanReq'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.BaiChuanDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/glm2_6b:
    post:
      consumes:
      - application/json
      description: conversational AI
      parameters:
      - description: body of glm2
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.glm2Request'
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/iflytekspark:
    post:
      consumes:
      - application/json
      description: conversational AI
      parameters:
      - description: body of iflytekspark
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.iflyteksparkRequest'
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/llama2_7b:
    post:
      consumes:
      - application/json
      description: conversational AI
      parameters:
      - description: body of llama2
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.llama2Request'
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/luojia:
    get:
      consumes:
      - application/json
      description: list luo-jia big model records
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_bigmodel_app.LuoJiaRecordDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
    post:
      consumes:
      - application/json
      description: luo-jia big model
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.luojiaResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/luojia_upload_picture:
    post:
      consumes:
      - application/json
      description: upload a picture for luo-jia
      parameters:
      - description: picture
        in: formData
        name: picture
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.pictureUploadResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/skywork_13b:
    post:
      consumes:
      - application/json
      description: conversational AI
      parameters:
      - description: body of skywork
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.skyWorkRequest'
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong:
    get:
      consumes:
      - application/json
      description: list wukong pictures user liked
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_bigmodel_app.WuKongLikeDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
    post:
      consumes:
      - application/json
      description: generates pictures by WuKong
      parameters:
      - description: body of wukong
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.wukongRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.wukongPicturesGenerateResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/digg:
    delete:
      consumes:
      - application/json
      description: delete digg to wukong picture
      parameters:
      - description: body of wukong
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.wukongCancelDiggPublicRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.wukongDiggResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
    post:
      consumes:
      - application/json
      description: add digg to wukong picture
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.wukongDiggResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/like:
    post:
      consumes:
      - application/json
      description: add like to wukong picture
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.wukongAddLikeResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/like/{id}:
    delete:
      consumes:
      - application/json
      description: cancel like on wukong picture
      parameters:
      - description: picture id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/link:
    put:
      consumes:
      - application/json
      description: generate download url of wukong picture
      parameters:
      - description: body of wukong
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.wukongPictureLink'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.wukongPictureLink'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/public:
    get:
      consumes:
      - application/json
      description: list wukong pictures user publiced
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_bigmodel_app.WuKongPublicDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
    post:
      consumes:
      - application/json
      description: add public to wukong picture
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/controller.wukongAddPublicResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/public/{id}:
    delete:
      consumes:
      - application/json
      description: cancel public on wukong picture
      parameters:
      - description: picture id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/publics:
    get:
      consumes:
      - application/json
      description: list all wukong pictures publiced
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_bigmodel_app.WuKongPublicDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/rank:
    get:
      consumes:
      - application/json
      description: get wukong rank
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.WuKongRankDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/samples/{batch}:
    get:
      consumes:
      - application/json
      description: gen wukong samples
      parameters:
      - description: batch num
        in: path
        name: batch
        required: true
        type: integer
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong/task:
    get:
      consumes:
      - application/json
      description: get last finished task
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.WuKongRankDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/bigmodel/wukong_async:
    post:
      consumes:
      - application/json
      description: send async wukong request task
      parameters:
      - description: body of wukong
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.wukongRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.wukongPicturesGenerateResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - BigModel
  /v1/challenge:
    get:
      consumes:
      - application/json
      description: get detail of challenge
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ChallengeCompetitorInfoDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - Challenge
  /v1/challenge/aiquestions:
    get:
      consumes:
      - application/json
      description: get ai questions
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.AIQuestionDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetAIQuestions
      tags:
      - Challenge
    post:
      consumes:
      - application/json
      description: submit answer of ai question
      parameters:
      - description: body of ai question answer
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.aiQuestionAnswerSubmitRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.aiQuestionAnswerSubmitResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Submit
      tags:
      - Challenge
  /v1/challenge/competitor:
    post:
      consumes:
      - application/json
      description: apply the challenge
      parameters:
      - description: body of applying
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.competitorApplyRequest'
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Apply
      tags:
      - Challenge
  /v1/challenge/ranking:
    get:
      consumes:
      - application/json
      description: get ranking list of challenge
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ChallengeRankingDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetRankingList
      tags:
      - Challenge
  /v1/cloud:
    get:
      consumes:
      - application/json
      description: list cloud config
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/app.CloudDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Cloud
  /v1/cloud/{cid}:
    get:
      consumes:
      - application/json
      description: get cloud pod
      parameters:
      - description: cloud config id
        in: path
        name: cid
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.InferenceDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetHttp
      tags:
      - Cloud
  /v1/cloud/pod/{id}:
    delete:
      consumes:
      - application/json
      description: release cloud resource
      parameters:
      - description: pod id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: system error
          schema:
            $ref: '#/definitions/controller.responseData'
      summary: Release
      tags:
      - Cloud
    get:
      consumes:
      - application/json
      description: WsSendReleasedPod is a websocket api which sends a released pod
        data to client.
      parameters:
      - description: pod id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.PodInfoDTO'
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: system error
          schema:
            $ref: '#/definitions/controller.responseData'
      summary: WsSendReleasedPod
      tags:
      - Cloud
  /v1/cloud/read/{owner}:
    get:
      consumes:
      - application/json
      description: get cloud pod
      parameters:
      - description: user name
        in: path
        name: owner
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.InferenceDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: CanRead
      tags:
      - Cloud
  /v1/cloud/subscribe:
    post:
      consumes:
      - application/json
      description: subscribe cloud
      parameters:
      - description: body of subscribe cloud
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.cloudSubscribeRequest'
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Subscribe
      tags:
      - Cloud
  /v1/competition:
    get:
      consumes:
      - application/json
      description: list competitions
      parameters:
      - description: competition status, such as over, preparing, in-progress
        in: query
        name: status
        type: string
      - description: just list competitions of competitor, if it is set
        in: query
        name: mine
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Competition
  /v1/competition/{id}:
    get:
      consumes:
      - application/json
      description: get detail of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.UserCompetitionDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - Competition
  /v1/competition/{id}/competitor:
    post:
      consumes:
      - application/json
      description: apply the competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: body of applying
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.CompetitorApplyRequest'
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Apply
      tags:
      - Competition
  /v1/competition/{id}/ranking:
    get:
      consumes:
      - application/json
      description: get ranking list of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CompetitionRankingDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetRankingList
      tags:
      - Competition
  /v1/competition/{id}/related_project:
    put:
      consumes:
      - application/json
      description: add related project
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: project info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.AddRelatedProjectRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: AddRelatedProject
      tags:
      - Competition
  /v1/competition/{id}/submissions:
    get:
      consumes:
      - application/json
      description: get submissions
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionSubmissionsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetSubmissions
      tags:
      - Competition
    post:
      consumes:
      - application/json
      description: submit
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: result file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionSubmissionDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Submit
      tags:
      - Competition
  /v1/competition/{id}/team:
    get:
      consumes:
      - application/json
      description: get team of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_opensourceways_xihe-server_competition_app.CompetitionTeamDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetMyTeam
      tags:
      - Competition
    post:
      consumes:
      - application/json
      description: create team of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: body of creating team
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.CreateTeamRequest'
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: CreateTeam
      tags:
      - Competition
    put:
      consumes:
      - application/json
      description: join a team of competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: body of joining team
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.JoinTeamRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: JoinTeam
      tags:
      - Competition
  /v1/competition/{id}/team/action/change_name:
    put:
      consumes:
      - application/json
      description: change name of a team
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: body of team name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.ChangeTeamNameRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: ChangeName
      tags:
      - Competition
  /v1/competition/{id}/team/action/delete_member:
    put:
      consumes:
      - application/json
      description: delete member of a team
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: body of delete member
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.DeleteMemberRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: DeleteMember
      tags:
      - Competition
  /v1/competition/{id}/team/action/dissolve:
    put:
      consumes:
      - application/json
      description: dissolve a team
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Dissolve
      tags:
      - Competition
  /v1/competition/{id}/team/action/quit:
    put:
      consumes:
      - application/json
      description: quit team
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: QuitTeam
      tags:
      - Competition
  /v1/competition/{id}/team/action/transfer_leader:
    put:
      consumes:
      - application/json
      description: transfer leader to a member
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: string
      - description: body of member
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.TransferLeaderRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: TransferLeader
      tags:
      - Competition
  /v1/competition/reginfo:
    get:
      consumes:
      - application/json
      description: get register info
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserRegisterInfoDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetRegisterInfo
      tags:
      - Competition
  /v1/course:
    get:
      consumes:
      - application/json
      description: list the course
      parameters:
      - description: course status, such as over, preparing, in-progress
        in: query
        name: status
        type: string
      - description: course type, such as ai, mindspore, foundation
        in: query
        name: type
        type: string
      - description: just list courses of player, if it is set
        in: query
        name: mine
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CourseSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Course
  /v1/course/:id/asg/:asgid:
    get:
      consumes:
      - application/json
      description: Get assignment
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: asg id
        in: path
        name: asgid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.AsgDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetAssignment
      tags:
      - Course
  /v1/course/{id}:
    get:
      consumes:
      - application/json
      description: get course information
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CourseDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - Course
  /v1/course/{id}/asg/list:
    get:
      consumes:
      - application/json
      description: list assignments
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: assignments status, such as finish
        in: query
        name: status
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.AsgWorkDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: ListAssignments
      tags:
      - Course
  /v1/course/{id}/asg/result:
    get:
      consumes:
      - application/json
      description: get submissions
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.RelateProjectDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetSubmissions
      tags:
      - Course
  /v1/course/{id}/cert:
    get:
      consumes:
      - application/json
      description: get certification
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.CertInfoDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetCertification
      tags:
      - Course
  /v1/course/{id}/player:
    post:
      consumes:
      - application/json
      description: apply the course
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: body of applying
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.StudentApplyRequest'
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Apply
      tags:
      - Course
  /v1/course/{id}/record:
    put:
      consumes:
      - application/json
      description: add play record
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: record info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.PlayRecordRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: AddPlayRecord
      tags:
      - Course
  /v1/course/{id}/related_project:
    put:
      consumes:
      - application/json
      description: add related project
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: project info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.AddCourseRelatedProjectRequest'
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: AddCourseRelatedProject
      tags:
      - Course
  /v1/course/reginfo:
    get:
      consumes:
      - application/json
      description: get register info
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserRegisterInfoDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetRegisterInfo
      tags:
      - Course
  /v1/dataset:
    get:
      consumes:
      - application/json
      description: list global public dataset
      parameters:
      - description: name of dataset
        in: query
        name: name
        type: string
      - description: tags, separate multiple tags with commas
        in: query
        name: tags
        type: string
      - description: tag kinds, separate multiple kinds with commas
        in: query
        name: tag_kinds
        type: string
      - description: dataset level, such as official, good
        in: query
        name: level
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalDatasetsDTO'
      summary: ListGlobal
      tags:
      - Dataset
    post:
      consumes:
      - application/json
      description: create dataset
      parameters:
      - description: body of creating dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.datasetCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.DatasetDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - Dataset
  /v1/dataset/{owner}:
    get:
      consumes:
      - application/json
      description: list dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: query
        name: name
        type: string
      - description: repo type of dataset, value can be public or private
        in: query
        name: repo_type
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.datasetsInfo'
      summary: List
      tags:
      - Dataset
  /v1/dataset/{owner}/{id}:
    put:
      consumes:
      - application/json
      description: update property of dataset
      parameters:
      - description: id of dataset
        in: path
        name: id
        required: true
        type: string
      - description: body of updating dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.datasetUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Dataset
  /v1/dataset/{owner}/{id}/tags:
    put:
      consumes:
      - application/json
      description: set tags for dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: id of dataset
        in: path
        name: id
        required: true
        type: string
      - description: body of tags
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.resourceTagsUpdateRequest'
      responses:
        "202":
          description: Accepted
      summary: SetTags
      tags:
      - Dataset
  /v1/dataset/{owner}/{name}:
    delete:
      consumes:
      - application/json
      description: delete dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete
      tags:
      - Dataset
    get:
      consumes:
      - application/json
      description: get dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.datasetDetail'
      summary: Get
      tags:
      - Dataset
  /v1/dataset/{owner}/{name}/check:
    get:
      consumes:
      - application/json
      description: check whether the name can be applied to create a new dataset
      parameters:
      - description: owner of dataset
        in: path
        name: owner
        required: true
        type: string
      - description: name of dataset
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.canApplyResourceNameResp'
      summary: Check
      tags:
      - Dataset
  /v1/finetune:
    get:
      consumes:
      - application/json
      description: list finetunes
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserFinetunesDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Finetune
    post:
      consumes:
      - application/json
      description: create finetune
      parameters:
      - description: body of creating finetune
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.FinetuneCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.finetuneCreateResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - Finetune
  /v1/finetune/{id}:
    delete:
      consumes:
      - application/json
      description: delete finetune
      parameters:
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Delete
      tags:
      - Finetune
    put:
      consumes:
      - application/json
      description: terminate finetune
      parameters:
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Terminate
      tags:
      - Finetune
  /v1/finetune/{id}/log:
    get:
      consumes:
      - application/json
      description: download finetune log
      parameters:
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.finetuneLog'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Log
      tags:
      - Finetune
  /v1/finetune/{id}/log/ws:
    get:
      consumes:
      - application/json
      description: watch single finetune
      parameters:
      - description: finetune id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.finetuneLog'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: WatchSingle
      tags:
      - Finetune
  /v1/finetune/ws:
    get:
      consumes:
      - application/json
      description: watch finetunes
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FinetuneSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: WatchFinetunes
      tags:
      - Finetune
  /v1/homepage:
    get:
      consumes:
      - application/json
      description: list the courses and competitions
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.homeInfo'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: ListAll
      tags:
      - HomePage
  /v1/homepage/electricity:
    get:
      consumes:
      - application/json
      description: list the project dataset model courses and competitions
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.homeElectricityInfo'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: ListAllElectricity
      tags:
      - HomePage
  /v1/inference/project/{owner}/{pid}:
    get:
      consumes:
      - application/json
      description: create inference
      parameters:
      - description: project owner
        in: path
        name: owner
        required: true
        type: string
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.InferenceDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - Inference
  /v1/login:
    get:
      consumes:
      - application/json
      description: callback of authentication by authing
      parameters:
      - description: authing code
        in: query
        name: code
        required: true
        type: string
      - description: redirect uri
        in: query
        name: redirect_uri
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
        "501":
          description: Not Implemented
          schema:
            type: duplicate_creating
      tags:
      - Login
  /v1/login/{account}:
    get:
      consumes:
      - application/json
      description: get info of login
      parameters:
      - description: account
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LoginDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Login
  /v1/model:
    get:
      consumes:
      - application/json
      description: list global public model
      parameters:
      - description: name of model
        in: query
        name: name
        type: string
      - description: tags, separate multiple tags with commas
        in: query
        name: tags
        type: string
      - description: tag kinds, separate multiple kinds with commas
        in: query
        name: tag_kinds
        type: string
      - description: model level, such as official, good
        in: query
        name: level
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalModelsDTO'
      summary: ListGlobal
      tags:
      - Model
    post:
      consumes:
      - application/json
      description: create model
      parameters:
      - description: body of creating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.modelCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.ModelDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: Create
      tags:
      - Model
  /v1/model/{owner}:
    get:
      consumes:
      - application/json
      description: list model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: query
        name: name
        type: string
      - description: repo type of model, value can be public or private
        in: query
        name: repo_type
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.modelsInfo'
      summary: List
      tags:
      - Model
  /v1/model/{owner}/{id}:
    put:
      consumes:
      - application/json
      description: update property of model
      parameters:
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of updating model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.modelUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Model
  /v1/model/{owner}/{id}/tags:
    put:
      consumes:
      - application/json
      description: set tags for model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of tags
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.resourceTagsUpdateRequest'
      responses:
        "202":
          description: Accepted
      summary: SetTags
      tags:
      - Model
  /v1/model/{owner}/{name}:
    delete:
      consumes:
      - application/json
      description: delete model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete
      tags:
      - Model
    get:
      consumes:
      - application/json
      description: get model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.modelDetail'
      summary: Get
      tags:
      - Model
  /v1/model/{owner}/{name}/check:
    get:
      consumes:
      - application/json
      description: check whether the name can be applied to create a new model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: name of model
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.canApplyResourceNameResp'
      summary: Check
      tags:
      - Model
  /v1/model/relation/{owner}/{id}/dataset:
    delete:
      consumes:
      - application/json
      description: remove related dataset to model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceRemoveRequest'
      responses:
        "204":
          description: No Content
      summary: RemoveRelatedDataset
      tags:
      - Model
    put:
      consumes:
      - application/json
      description: add related dataset to model
      parameters:
      - description: owner of model
        in: path
        name: owner
        required: true
        type: string
      - description: id of model
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceAddRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.ResourceDTO'
      summary: AddRelatedDataset
      tags:
      - Model
  /v1/project:
    get:
      consumes:
      - application/json
      description: list global public project
      parameters:
      - description: name of project
        in: query
        name: name
        type: string
      - description: tags, separate multiple tags with commas
        in: query
        name: tags
        type: string
      - description: tag kinds, separate multiple kinds with commas
        in: query
        name: tag_kinds
        type: string
      - description: project level, such as official, good
        in: query
        name: level
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.GlobalProjectsDTO'
      summary: ListGlobal
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: create project
      parameters:
      - description: body of creating project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectCreateRequest'
      produces:
      - application/json
      responses: {}
      summary: Create
      tags:
      - Project
  /v1/project/{owner}:
    get:
      consumes:
      - application/json
      description: list project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: query
        name: name
        type: string
      - description: repo type of project, value can be public or private
        in: query
        name: repo_type
        type: string
      - description: count per page
        in: query
        name: count_per_page
        type: integer
      - description: page num which starts from 1
        in: query
        name: page_num
        type: integer
      - description: sort keys, value can be update_time, first_letter, download_count
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.projectsInfo'
      summary: List
      tags:
      - Project
  /v1/project/{owner}/{id}:
    post:
      consumes:
      - application/json
      description: fork project
      parameters:
      - description: owner of forked project
        in: path
        name: owner
        required: true
        type: string
      - description: id of forked project
        in: path
        name: id
        required: true
        type: string
      - description: body of forking project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectForkRequest'
      produces:
      - application/json
      responses: {}
      summary: Fork
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: update project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of updating project
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.projectUpdateRequest'
      produces:
      - application/json
      responses: {}
      summary: Update
      tags:
      - Project
  /v1/project/{owner}/{id}/tags:
    put:
      consumes:
      - application/json
      description: set tags for project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of tags
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.resourceTagsUpdateRequest'
      responses:
        "202":
          description: Accepted
      summary: SetTags
      tags:
      - Project
  /v1/project/{owner}/{name}:
    delete:
      consumes:
      - application/json
      description: delete project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete
      tags:
      - Project
    get:
      consumes:
      - application/json
      description: get project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.projectDetail'
      summary: Get
      tags:
      - Project
  /v1/project/{owner}/{name}/check:
    get:
      consumes:
      - application/json
      description: check whether the name can be applied to create a new project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: name of project
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.canApplyResourceNameResp'
      summary: Check
      tags:
      - Project
  /v1/project/relation/{owner}/{id}/dataset:
    delete:
      consumes:
      - application/json
      description: remove related dataset to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceRemoveRequest'
      responses:
        "204":
          description: No Content
      summary: RemoveRelatedDataset
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: add related dataset to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related dataset
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceAddRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.ResourceDTO'
      summary: AddRelatedDataset
      tags:
      - Project
  /v1/project/relation/{owner}/{id}/model:
    delete:
      consumes:
      - application/json
      description: remove related model to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceRemoveRequest'
      responses:
        "204":
          description: No Content
      summary: RemoveRelatedModel
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: add related model to project
      parameters:
      - description: owner of project
        in: path
        name: owner
        required: true
        type: string
      - description: id of project
        in: path
        name: id
        required: true
        type: string
      - description: body of related model
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.relatedResourceAddRequest'
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/app.ResourceDTO'
      summary: AddRelatedModel
      tags:
      - Project
  /v1/promotion/{id}:
    get:
      consumes:
      - application/json
      description: get promotion
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.PromotionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.responseData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.responseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.responseData'
      summary: Get
      tags:
      - Promotion
  /v1/promotion/{id}/apply:
    post:
      consumes:
      - application/json
      description: apply the Promotion
      parameters:
      - description: promotion id
        in: path
        name: id
        required: true
        type: string
      - description: body of applying
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.PromotionApplyReq'
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Apply
      tags:
      - Promotion
  /v1/promotion/{promotion}/points/{account}:
    get:
      consumes:
      - application/json
      description: get user points in promotion
      parameters:
      - description: username
        in: path
        name: account
        required: true
        type: string
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetUserPoints
      tags:
      - Promotion
  /v1/promotion/{promotion}/ranking:
    get:
      consumes:
      - application/json
      description: get user points ranking in promotion
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetUserRanking
      tags:
      - Promotion
  /v1/promotion/user/{account}:
    get:
      consumes:
      - application/json
      description: get user registrater promotion
      parameters:
      - description: username
        in: path
        name: account
        required: true
        type: string
      responses:
        "201":
          description: Created
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetUserRegitration
      tags:
      - Promotion
  /v1/promotions:
    get:
      consumes:
      - application/json
      description: list promotions
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.PromotionsDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.responseData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.responseData'
      summary: List
      tags:
      - Promotion
  /v1/repo/{type}/{name}/dir/{path}:
    delete:
      consumes:
      - application/json
      description: Delete repo directory
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo dir
        in: path
        name: path
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: DeleteDir
      tags:
      - RepoFile
  /v1/repo/{type}/{name}/file/{path}:
    delete:
      consumes:
      - application/json
      description: Delete repo file
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Delete
      tags:
      - RepoFile
    post:
      consumes:
      - application/json
      description: create repo file
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      - description: body of creating repo file
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.RepoFileCreateRequest'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - RepoFile
    put:
      consumes:
      - application/json
      description: update repo file
      parameters:
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      - description: body of updating repo file
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.RepoFileUpdateRequest'
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Update
      tags:
      - RepoFile
  /v1/repo/{type}/{user}/{name}:
    get:
      consumes:
      - application/json
      description: Download repo
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: DownloadRepo
      tags:
      - RepoFile
  /v1/repo/{type}/{user}/{name}/app:
    get:
      consumes:
      - application/json
      description: repo file contain app
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: ContainApp
      tags:
      - RepoFile
  /v1/repo/{type}/{user}/{name}/file/{path}:
    get:
      consumes:
      - application/json
      description: Download repo file
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.RepoFileDownloadDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Download
      tags:
      - RepoFile
  /v1/repo/{type}/{user}/{name}/file/{path}/preview:
    get:
      consumes:
      - application/json
      description: preview repo file
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Preview
      tags:
      - RepoFile
  /v1/repo/{type}/{user}/{name}/files:
    get:
      consumes:
      - application/json
      description: list repo file in a path
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: query
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.RepoPathItem'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - RepoFile
  /v1/repo/{type}/{user}/{name}/readme:
    get:
      consumes:
      - application/json
      description: repo file contain readme
      parameters:
      - description: user
        in: path
        name: user
        required: true
        type: string
      - description: repo name
        in: path
        name: name
        required: true
        type: string
      - description: repo file path
        in: path
        name: path
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: ContainReadme
      tags:
      - RepoFile
  /v1/search:
    get:
      consumes:
      - application/json
      description: search resource and user
      parameters:
      - description: name of resource or user
        in: query
        name: name
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.SearchDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Search
  /v1/signin:
    put:
      consumes:
      - application/json
      description: user sign in
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Login
  /v1/tags/{type}:
    get:
      consumes:
      - application/json
      description: list tags
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.DomainTagsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Tags
  /v1/train/project/{pid}/config:
    get:
      consumes:
      - application/json
      description: get user last preset training config
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TrainingConfigDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetLastTrainingConfig
      tags:
      - Training
  /v1/train/project/{pid}/training:
    get:
      consumes:
      - application/json
      description: get trainings
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TrainingSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Training
    post:
      consumes:
      - application/json
      description: create training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: body of creating training
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.TrainingCreateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.trainingCreateResp'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Create
      tags:
      - Training
  /v1/train/project/{pid}/training/{id}:
    delete:
      consumes:
      - application/json
      description: delete training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Delete
      tags:
      - Training
    get:
      consumes:
      - application/json
      description: get training info
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.trainingDetail'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - Training
    post:
      consumes:
      - application/json
      description: recreate training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.trainingCreateResp'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Recreate
      tags:
      - Training
    put:
      consumes:
      - application/json
      description: terminate training
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      responses:
        "202":
          description: Accepted
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Terminate
      tags:
      - Training
  /v1/train/project/{pid}/training/{id}/result/{type}:
    get:
      consumes:
      - application/json
      description: get log url of training for downloading
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      - description: training id
        in: path
        name: id
        required: true
        type: string
      - description: 'training result: log, output'
        in: path
        name: type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.trainingLogResp'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: GetLog
      tags:
      - Training
  /v1/train/project/{pid}/training/ws:
    get:
      consumes:
      - application/json
      description: get trainings
      parameters:
      - description: project id
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TrainingSummaryDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: List
      tags:
      - Training
  /v1/user:
    get:
      consumes:
      - application/json
      description: get user
      parameters:
      - description: account
        in: query
        name: account
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.userDetail'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: Get
      tags:
      - User
  /v1/user/activity/{account}:
    get:
      consumes:
      - application/json
      description: list activitys
      parameters:
      - description: the account the activities belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ActivityDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Activity
  /v1/user/agreement:
    put:
      consumes:
      - application/json
      description: update user agreement info
      parameters:
      - description: body of update user agreement
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.UserAgreement'
      produces:
      - application/json
      responses: {}
      summary: Update Agreement
      tags:
      - User
  /v1/user/check_email:
    get:
      consumes:
      - application/json
      description: check user email
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: "no"
      tags:
      - User
  /v1/user/email/bind:
    post:
      consumes:
      - application/json
      description: bind email according the code
      parameters:
      - description: email and code
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.EmailCode'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: BindEmail
      tags:
      - User
  /v1/user/email/sendbind:
    post:
      consumes:
      - application/json
      description: send code to user
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.UserDTO'
        "500":
          description: Internal Server Error
          schema:
            type: duplicate_creating
      summary: SendBindEmail
      tags:
      - User
  /v1/user/follower/{account}:
    get:
      consumes:
      - application/json
      description: list followers
      parameters:
      - description: the account the followers belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FollowsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Follower
  /v1/user/following:
    post:
      consumes:
      - application/json
      description: add a following
      parameters:
      - description: body of creating following
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.followingCreateRequest'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "404":
          description: Not Found
          schema:
            type: duplicate_creating
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
  /v1/user/following/{account}:
    delete:
      consumes:
      - application/json
      description: remove a following
      parameters:
      - description: the account of following
        in: path
        name: account
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "401":
          description: Unauthorized
          schema:
            type: not_allowed
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
    get:
      consumes:
      - application/json
      description: list followings
      parameters:
      - description: the account the followings belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.FollowsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Following
  /v1/user/info:
    put:
      consumes:
      - application/json
      description: update user info
      parameters:
      - description: body of update user information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.UserInfoUpdateRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.UserBasicInfoUpdateRequest'
        "400":
          description: Bad Request
          schema:
            type: bad_request_param
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: UpdateUserRegistrationInfo
      tags:
      - User
  /v1/user/info/{account}:
    get:
      consumes:
      - application/json
      description: get user apply info
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
      summary: GetInfo
      tags:
      - User
  /v1/user/like:
    delete:
      consumes:
      - application/json
      description: delete a like
      parameters:
      - description: body of deleting like
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.likeDeleteRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
    post:
      consumes:
      - application/json
      description: create a like
      parameters:
      - description: body of creating like
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.likeCreateRequest'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
        "401":
          description: Unauthorized
          schema:
            type: bad_request_param
        "402":
          description: Payment Required
          schema:
            type: not_allowed
        "403":
          description: Forbidden
          schema:
            type: resource_not_exists
        "404":
          description: Not Found
          schema:
            type: duplicate_creating
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
  /v1/user/like/{account}:
    get:
      consumes:
      - application/json
      description: list likes
      parameters:
      - description: the account the likes belong to
        in: path
        name: account
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.LikeDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      tags:
      - Like
  /v1/user/whitelist:
    get:
      description: list user whitelist
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.responseData'
      summary: ListWhiteList
      tags:
      - user
  /v1/user/whitelist/{type}:
    get:
      consumes:
      - application/json
      description: check user whitelist info
      parameters:
      - description: type
        in: path
        name: type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.WhitelistDTO'
        "400":
          description: Bad Request
          schema:
            type: bad_request_body
      summary: CheckWhiteList
      tags:
      - User
  /v1/user_points:
    get:
      consumes:
      - application/json
      description: get user points details
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.UserPointsDetailsDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: get user points details
      tags:
      - UserPoints
  /v1/user_points/taskdoc:
    get:
      consumes:
      - application/json
      description: task doc
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TaskDocDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: task doc
      tags:
      - UserPoints
  /v1/user_points/tasks:
    get:
      consumes:
      - application/json
      description: tasks of day
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.TasksCompletionInfoDTO'
        "500":
          description: Internal Server Error
          schema:
            type: system_error
      summary: tasks of day
      tags:
      - UserPoints
swagger: "2.0"
